#An intro to Webpack
Problem of many files and adding to a large size, browser to dev-code interpretation needed polyfill code to bridge the gap.
Webpack created to solve those problems.
Building a React app by importing node libraries, babel will transpile code so taht browser will read, importing webpack to bundle the app.
Webpack out of the box only knows Javascript and JSON, any other language needs added to the loaders.
PLugins

#Webpack Concepts
Entry -which module webpack should use to build out internal dependency graph
Output - wher eto emit the bundles
Loaders- test and use properties, where files other than javascript or JSON need added information to run
Plugins - many options here
Mode - dev/prod/none, different optimizations, default is prod
Browser Compatibility - ES5-compliants browswers are good, older than IE8 not good.

#rendering elements
What? - elements are not components, function with some html and ReactDOM.render(element, document.getElementById('root'));
Why? - "thinking about how the UI should look at any given moment, rather than how to change it over time, eliminates a whole class of bugs."

#react hello world
again, 
ReactDOM.render(
  <h1>Hello, world!</h1>,
  document.getElementById('root')
);

#introducing JSX
setting variable to html tags is a JSX
example -----   const element = <h1>Hello, world!</h1>;
Curly braces to imbed expressions(any valid javscript): 
example -----
```
const name = 'Josh Perez';
const element = <h1>Hello, {name}</h1>;

ReactDOM.render(
  element,
  document.getElementById('root')
);
```

