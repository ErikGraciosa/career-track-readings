Array Methods- the new ones to me i'll have to practice with are \
.includes() checks if any element equals arg in .includes(arg), 
.some() a conditional check if any element is true then returns true, 
Array.from() makes things that are array-like into a true array when passed in as an arg
Array.of() creates an array from all arguments passed to it. Seems like array literal would be better.

Array Method Cheat Sheet-A nice flow chart with good descriptions

TDD, Where Did It All Go Wrong-
Resistance to TDD 10 years ago. 
More test code written than implementation code.
Example of tests breaking when refactoring and took a longer amount of time to make a change because the test would have to be fixed.
Shipping code fast vs maintainable code.
Failing Tests will prevent checkins => check-in dance.
What is the right way to do TDD?
Where did TDD go wrong?
Write a test when implementing a requirement.
Write test against the stable contract.
BDD-behavior driven development, Dan North
As long as you have a test, write code quickly to satisfy the test.
Make good code in refactoring, no new tests in refactoring.
Dependency bad!



TDD red-green-refactor-First write a test, test will fail, then write enough code to satisfy the test, then come back and clean up the code. Seems simple enough.

Cycles of TDD-The different scales of the TDD mentioned make it seem like the author is highlighting a perpetual need to emphasis good code.
