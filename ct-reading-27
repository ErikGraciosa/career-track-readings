#setState explained
pitfalls: setState receives an object, only the last key will be saved, work around is to pass functions.
updater to access state immediately
teach setState() as asyncronous.

#Lists and Keys
Keys need to be unique in siblings, not globally, anytime in a .map() give the elements a key.
Keys used by react to detect change.
Decide when to use inline or create another component to keep code clean.

#Typechecking Props
Adding a type of variable check.
Greeting.propTypes = {
  name: PropTypes.string
};

#Components and Props
Function and class components, we know class, i hear we get into functional components.
Components need to be started with capital letter, react will tret the tag as a DOM element if not capital.
All React components must act like pure functions with respect to their props.

#handling events
<button onClick={activateLasers}>
  Activate Lasers
</button>
Make sure to prevent default.
// This binding is necessary to make `this` work in the callback
    this.handleClick = this.handleClick.bind(this);
//Seems weird.

//Seems less weird
class LoggingButton extends React.Component {
  handleClick() {
    console.log('this is:', this);
  }

  render() {
    // This syntax ensures `this` is bound within handleClick
    return (
      <button onClick={() => this.handleClick()}>
        Click me
      </button>
    );
  }
}


#snapshot testing
Used to test the output is correct. Different from visual regression testing.
Snapshot will serialize values and compare using a diff algorithm.

#React Testing Library
Testing like a user would interact with the site.
